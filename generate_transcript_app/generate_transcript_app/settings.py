"""
Django settings for generate_transcript_app project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from dotenv import load_dotenv
from pathlib import Path
from pwd import getpwuid
from pydantic_settings import BaseSettings


load_dotenv()


class DjangoEnvConfig(BaseSettings):
    mysql_database: str
    mysql_user: str
    mysql_password: str
    mysql_host: str
    secret_key: str
    debug: bool
    allowed_hosts: list[str]
    csrf_trusted_origins: list[str]
    delete_files_older_than_x_days: int = 1


DJANGO_ENV_CONFIG = DjangoEnvConfig()  # type: ignore


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = DJANGO_ENV_CONFIG.secret_key

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = DJANGO_ENV_CONFIG.debug

ALLOWED_HOSTS = DJANGO_ENV_CONFIG.allowed_hosts

CSRF_TRUSTED_ORIGINS = DJANGO_ENV_CONFIG.csrf_trusted_origins

__USERNAME = getpwuid(os.getuid()).pw_name
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': f'/tmp/{__USERNAME}-django/',
    },
}

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "transcriber",
    "django_crontab",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "generate_transcript_app.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "generate_transcript_app.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "STORAGE_ENGINE": "InnoDB",
        "NAME": DJANGO_ENV_CONFIG.mysql_database,
        "USER": DJANGO_ENV_CONFIG.mysql_user,
        "PASSWORD": DJANGO_ENV_CONFIG.mysql_user,
        "HOST": DJANGO_ENV_CONFIG.mysql_host,
        "OPTIONS": {
            "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
            "isolation_level": "repeatable read"
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

MEDIA_URL = "media/"
MEDIA_ROOT = BASE_DIR / MEDIA_URL

CRONJOBS = [
    # delete old files from disk every hour
    (
        "0 * * * *",
        "transcriber.cron.delete_old_files_from_disk",
        [],
        {
            "older_than_x_days": DJANGO_ENV_CONFIG.delete_files_older_than_x_days,
        }
    ),
]
